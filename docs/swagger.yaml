swagger: "2.0"
info:
  description: "API description for the rideshare backend."
  version: "0.0.1"
  title: "Rideshare"
  contact:
    email: "quan@mqt.io"
host: "localhost:5000"
basePath: "/"
tags:
- name: "user"
  description: "User operations"
  externalDocs:
    description: "Doc description"
    url: "http://example.com"
- name: "ride"
  description: "Ride operations"
  externalDocs:
    description: "Find out more"
    url: "http://example.com"
schemes:
# - "https"
- "http"
paths:
  /user:
    get:
      tags:
      - "user"
      summary: "Get list of all users"
      description: "This is only accessible by an administrator."
      operationId: "getAllUsers"
      produces:
      - "application/json"
      responses:
        default:
          description: "successful operation"
    post:
      tags:
      - "user"
      summary: "Create user"
      description: ""
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
    delete:
      tags:
      - "user"
      summary: "Delete all users"
      description: "This is a testing endpoint not meant for production. This is only accessible by an administrator"
      operationId: "deleteAllUsers"
      responses:
        default:
          description: "successful operation"
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by ID"
      description: "This is only accessible by a logged in user with the given ID or an administrator."
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The ID of the user to fetch. "
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid user ID supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update user information"
      description: "This is only accessible by a logged in user with the given ID."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id of user to be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user ID supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This is only accessible by a logged in user with the given ID or an administrator."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id of user to be deleted"
        required: true
        type: "integer"
      responses:
        400:
          description: "Invalid user ID supplied"
        404:
          description: "User not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique user ID."
      firstName:
        type: "string"
        description: "User's given name."
      lastName:
        type: "string"
        description: "User's family name."
      email:
        type: "string"
        description: "Unique user email."
      password:
        type: "string"
        format: "password"
        description: "User's password (ignore this security risk for now..)."
    xml:
      name: "User"
  Ride:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique ride ID."
      from:
        type: "string"
        description: "Name of ride start location."
      to:
        type: "string"
        description: "Name of ride destination location."
      date:
        type: "object"
        description: "Expected departure time range."
        properties:
          description:
            type: "string"
            description: "Friendly description of the time range."
          start_time:
            type: "integer"
            format: "int32"
            description: "Start time of the time range."
          end_time:
            type: "integer"
            format: "int32"
            description: "End time of the time range."
      actual_time:
        type: "string"
        format: "date-time"
        description: "Actual ride departure time."
      capacity:
        type: "integer"
        description: "Number of total passenger seats offered by the ride."
      driver:
        type: "object"
        description: "User offering the ride."
        properties:
          id:
            type: "integer"
            format: "int64"
            description: "Unique user ID."
          firstName:
            type: "string"
            description: "User's given name."
          lastName:
            type: "string"
            description: "User's family name."
      passengers:
        type: "array"
        items:
          type: "object"
          description: "User interested in the ride."
          properties:
            id:
              type: "integer"
              format: "int64"
              description: "Unique user ID."
            firstName:
              type: "string"
              description: "User's given name."
            lastName:
              type: "string"
              description: "User's family name."
            status:
              type: "string"
              description: "Passenger status for the ride. e.g. 'REQUESTED', 'CONFIRMED', 'CANCELLED'"
    xml:
      name: "User"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"